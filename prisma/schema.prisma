generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             String        @id @default(uuid())
  username       String
  passwordHash   String
  onboarded      Boolean       @default(false)
  role           Role          @default(UNAPPROVED)
  organizationId String?
  lastActivityAt DateTime      @default(now())
  createdAt      DateTime      @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  medErrors      MedError[]    @relation("AccountMedErrors")
  user           User?
  refreshTokens  RefreshToken[]

  @@unique([organizationId, username])
}

model User {
  id        String  @id @default(uuid())
  name      String?
  position  String?
  phone     String?
  accountId String  @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Organization {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  accounts  Account[]
}

model Severity {
  id        String     @id @default(uuid())
  code      String     @unique
  label     String
  medErrors MedError[]
}

model ErrorType {
  id            String         @id @default(uuid())
  code          String         @unique
  label         String
  medErrors     MedError[]
  subErrorTypes SubErrorType[]
}

model SubErrorType {
  id          String     @id @default(uuid())
  code        String     @unique
  label       String
  errorTypeId String
  medErrors   MedError[]
  errorType   ErrorType  @relation(fields: [errorTypeId], references: [id])
}

model MedError {
  id                     String          @id @default(uuid())
  eventDate              DateTime
  unitId                 String
  description            String
  severityId             String
  errorTypeId            String
  subErrorTypeId         String
  reporterAccountId      String
  createdAt              DateTime        @default(now())
  reporterUsername       String
  reporterName           String
  reporterPosition       String
  reporterPhone          String
  reporterOrganizationId String?
  errorType              ErrorType       @relation(fields: [errorTypeId], references: [id])
  reporterAccount        Account         @relation("AccountMedErrors", fields: [reporterAccountId], references: [id], onDelete: Cascade)
  severity               Severity        @relation(fields: [severityId], references: [id])
  subErrorType           SubErrorType    @relation(fields: [subErrorTypeId], references: [id])
  unit                   Unit            @relation(fields: [unitId], references: [id])
  images                 MedErrorImage[]
}

model MedErrorImage {
  id         String   @id @default(uuid())
  medErrorId String
  url        String
  createdAt  DateTime @default(now())
  medError   MedError @relation(fields: [medErrorId], references: [id], onDelete: Cascade)
}



model Unit {
  id        String     @id @default(uuid())
  code      String     @unique
  label     String
  medErrors MedError[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  accountId String
  expiresAt DateTime
  createdAt DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

enum Role {
  UNAPPROVED
  USER
  ADMIN
  DEVELOPER
}
